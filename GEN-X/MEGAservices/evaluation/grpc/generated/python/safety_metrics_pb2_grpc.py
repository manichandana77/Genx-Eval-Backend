# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common_pb2 as common__pb2
import safety_metrics_pb2 as safety__metrics__pb2


class SafetyMetricsServiceStub(object):
    """Safety Metrics Service - Internal service for bias, toxicity, hallucination
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalculateBias = channel.unary_unary(
                '/evaluation.safety.SafetyMetricsService/CalculateBias',
                request_serializer=safety__metrics__pb2.BiasRequest.SerializeToString,
                response_deserializer=common__pb2.MetricResponse.FromString,
                )
        self.CalculateToxicity = channel.unary_unary(
                '/evaluation.safety.SafetyMetricsService/CalculateToxicity',
                request_serializer=safety__metrics__pb2.ToxicityRequest.SerializeToString,
                response_deserializer=common__pb2.MetricResponse.FromString,
                )
        self.CalculateHallucination = channel.unary_unary(
                '/evaluation.safety.SafetyMetricsService/CalculateHallucination',
                request_serializer=safety__metrics__pb2.HallucinationRequest.SerializeToString,
                response_deserializer=common__pb2.MetricResponse.FromString,
                )


class SafetyMetricsServiceServicer(object):
    """Safety Metrics Service - Internal service for bias, toxicity, hallucination
    """

    def CalculateBias(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateToxicity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateHallucination(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SafetyMetricsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CalculateBias': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateBias,
                    request_deserializer=safety__metrics__pb2.BiasRequest.FromString,
                    response_serializer=common__pb2.MetricResponse.SerializeToString,
            ),
            'CalculateToxicity': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateToxicity,
                    request_deserializer=safety__metrics__pb2.ToxicityRequest.FromString,
                    response_serializer=common__pb2.MetricResponse.SerializeToString,
            ),
            'CalculateHallucination': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateHallucination,
                    request_deserializer=safety__metrics__pb2.HallucinationRequest.FromString,
                    response_serializer=common__pb2.MetricResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'evaluation.safety.SafetyMetricsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SafetyMetricsService(object):
    """Safety Metrics Service - Internal service for bias, toxicity, hallucination
    """

    @staticmethod
    def CalculateBias(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluation.safety.SafetyMetricsService/CalculateBias',
            safety__metrics__pb2.BiasRequest.SerializeToString,
            common__pb2.MetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateToxicity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluation.safety.SafetyMetricsService/CalculateToxicity',
            safety__metrics__pb2.ToxicityRequest.SerializeToString,
            common__pb2.MetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateHallucination(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluation.safety.SafetyMetricsService/CalculateHallucination',
            safety__metrics__pb2.HallucinationRequest.SerializeToString,
            common__pb2.MetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
