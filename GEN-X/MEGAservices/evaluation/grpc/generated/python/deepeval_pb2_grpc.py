# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common_pb2 as common__pb2
import deepeval_pb2 as deepeval__pb2


class DeepEvalServiceStub(object):
    """Main DeepEval Service - Entry point for all metrics calculation
    ðŸŽ¯ Evaluator service calls THIS service for metric calculations

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalculateSingleMetric = channel.unary_unary(
                '/evaluation.deepeval.DeepEvalService/CalculateSingleMetric',
                request_serializer=deepeval__pb2.SingleMetricRequest.SerializeToString,
                response_deserializer=common__pb2.MetricResponse.FromString,
                )
        self.CalculateBatchMetrics = channel.unary_unary(
                '/evaluation.deepeval.DeepEvalService/CalculateBatchMetrics',
                request_serializer=deepeval__pb2.BatchMetricsRequest.SerializeToString,
                response_deserializer=deepeval__pb2.BatchMetricsResponse.FromString,
                )
        self.GetAvailableMetrics = channel.unary_unary(
                '/evaluation.deepeval.DeepEvalService/GetAvailableMetrics',
                request_serializer=deepeval__pb2.GetMetricsRequest.SerializeToString,
                response_deserializer=deepeval__pb2.AvailableMetricsResponse.FromString,
                )
        self.HealthCheck = channel.unary_unary(
                '/evaluation.deepeval.DeepEvalService/HealthCheck',
                request_serializer=common__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=common__pb2.HealthCheckResponse.FromString,
                )


class DeepEvalServiceServicer(object):
    """Main DeepEval Service - Entry point for all metrics calculation
    ðŸŽ¯ Evaluator service calls THIS service for metric calculations

    """

    def CalculateSingleMetric(self, request, context):
        """Single metric calculations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateBatchMetrics(self, request, context):
        """Batch processing - MAIN METHOD used by Evaluator service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableMetrics(self, request, context):
        """Get available metrics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeepEvalServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CalculateSingleMetric': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateSingleMetric,
                    request_deserializer=deepeval__pb2.SingleMetricRequest.FromString,
                    response_serializer=common__pb2.MetricResponse.SerializeToString,
            ),
            'CalculateBatchMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateBatchMetrics,
                    request_deserializer=deepeval__pb2.BatchMetricsRequest.FromString,
                    response_serializer=deepeval__pb2.BatchMetricsResponse.SerializeToString,
            ),
            'GetAvailableMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableMetrics,
                    request_deserializer=deepeval__pb2.GetMetricsRequest.FromString,
                    response_serializer=deepeval__pb2.AvailableMetricsResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=common__pb2.HealthCheckRequest.FromString,
                    response_serializer=common__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'evaluation.deepeval.DeepEvalService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DeepEvalService(object):
    """Main DeepEval Service - Entry point for all metrics calculation
    ðŸŽ¯ Evaluator service calls THIS service for metric calculations

    """

    @staticmethod
    def CalculateSingleMetric(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluation.deepeval.DeepEvalService/CalculateSingleMetric',
            deepeval__pb2.SingleMetricRequest.SerializeToString,
            common__pb2.MetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateBatchMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluation.deepeval.DeepEvalService/CalculateBatchMetrics',
            deepeval__pb2.BatchMetricsRequest.SerializeToString,
            deepeval__pb2.BatchMetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAvailableMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluation.deepeval.DeepEvalService/GetAvailableMetrics',
            deepeval__pb2.GetMetricsRequest.SerializeToString,
            deepeval__pb2.AvailableMetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluation.deepeval.DeepEvalService/HealthCheck',
            common__pb2.HealthCheckRequest.SerializeToString,
            common__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
