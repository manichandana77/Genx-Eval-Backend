# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . from . import common_pb2 as common__pb2
from . import task_metrics_pb2 as task__metrics__pb2


class TaskMetricsServiceStub(object):
    """Task-Specific Metrics Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalculateSummarization = channel.unary_unary(
                '/evaluation.task.TaskMetricsService/CalculateSummarization',
                request_serializer=task__metrics__pb2.SummarizationRequest.SerializeToString,
                response_deserializer=common__pb2.MetricResponse.FromString,
                )
        self.CalculateClassification = channel.unary_unary(
                '/evaluation.task.TaskMetricsService/CalculateClassification',
                request_serializer=task__metrics__pb2.ClassificationRequest.SerializeToString,
                response_deserializer=common__pb2.MetricResponse.FromString,
                )
        self.CalculateGeneration = channel.unary_unary(
                '/evaluation.task.TaskMetricsService/CalculateGeneration',
                request_serializer=task__metrics__pb2.GenerationRequest.SerializeToString,
                response_deserializer=common__pb2.MetricResponse.FromString,
                )
        self.CalculateConversation = channel.unary_unary(
                '/evaluation.task.TaskMetricsService/CalculateConversation',
                request_serializer=task__metrics__pb2.ConversationRequest.SerializeToString,
                response_deserializer=common__pb2.MetricResponse.FromString,
                )


class TaskMetricsServiceServicer(object):
    """Task-Specific Metrics Service
    """

    def CalculateSummarization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateClassification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateGeneration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateConversation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskMetricsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CalculateSummarization': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateSummarization,
                    request_deserializer=task__metrics__pb2.SummarizationRequest.FromString,
                    response_serializer=common__pb2.MetricResponse.SerializeToString,
            ),
            'CalculateClassification': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateClassification,
                    request_deserializer=task__metrics__pb2.ClassificationRequest.FromString,
                    response_serializer=common__pb2.MetricResponse.SerializeToString,
            ),
            'CalculateGeneration': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateGeneration,
                    request_deserializer=task__metrics__pb2.GenerationRequest.FromString,
                    response_serializer=common__pb2.MetricResponse.SerializeToString,
            ),
            'CalculateConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateConversation,
                    request_deserializer=task__metrics__pb2.ConversationRequest.FromString,
                    response_serializer=common__pb2.MetricResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'evaluation.task.TaskMetricsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskMetricsService(object):
    """Task-Specific Metrics Service
    """

    @staticmethod
    def CalculateSummarization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluation.task.TaskMetricsService/CalculateSummarization',
            task__metrics__pb2.SummarizationRequest.SerializeToString,
            common__pb2.MetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateClassification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluation.task.TaskMetricsService/CalculateClassification',
            task__metrics__pb2.ClassificationRequest.SerializeToString,
            common__pb2.MetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateGeneration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluation.task.TaskMetricsService/CalculateGeneration',
            task__metrics__pb2.GenerationRequest.SerializeToString,
            common__pb2.MetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluation.task.TaskMetricsService/CalculateConversation',
            task__metrics__pb2.ConversationRequest.SerializeToString,
            common__pb2.MetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
