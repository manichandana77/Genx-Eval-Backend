# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . from . import common_pb2 as common__pb2
from . import rag_metrics_pb2 as rag__metrics__pb2


class RAGMetricsServiceStub(object):
    """RAG Metrics Service - Internal service called by main DeepEval service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalculateAnswerRelevancy = channel.unary_unary(
                '/evaluation.rag.RAGMetricsService/CalculateAnswerRelevancy',
                request_serializer=rag__metrics__pb2.AnswerRelevancyRequest.SerializeToString,
                response_deserializer=common__pb2.MetricResponse.FromString,
                )
        self.CalculateFaithfulness = channel.unary_unary(
                '/evaluation.rag.RAGMetricsService/CalculateFaithfulness',
                request_serializer=rag__metrics__pb2.FaithfulnessRequest.SerializeToString,
                response_deserializer=common__pb2.MetricResponse.FromString,
                )
        self.CalculateContextualPrecision = channel.unary_unary(
                '/evaluation.rag.RAGMetricsService/CalculateContextualPrecision',
                request_serializer=rag__metrics__pb2.ContextualPrecisionRequest.SerializeToString,
                response_deserializer=common__pb2.MetricResponse.FromString,
                )
        self.CalculateContextualRecall = channel.unary_unary(
                '/evaluation.rag.RAGMetricsService/CalculateContextualRecall',
                request_serializer=rag__metrics__pb2.ContextualRecallRequest.SerializeToString,
                response_deserializer=common__pb2.MetricResponse.FromString,
                )
        self.CalculateContextualRelevancy = channel.unary_unary(
                '/evaluation.rag.RAGMetricsService/CalculateContextualRelevancy',
                request_serializer=rag__metrics__pb2.ContextualRelevancyRequest.SerializeToString,
                response_deserializer=common__pb2.MetricResponse.FromString,
                )


class RAGMetricsServiceServicer(object):
    """RAG Metrics Service - Internal service called by main DeepEval service
    """

    def CalculateAnswerRelevancy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateFaithfulness(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateContextualPrecision(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateContextualRecall(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateContextualRelevancy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RAGMetricsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CalculateAnswerRelevancy': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateAnswerRelevancy,
                    request_deserializer=rag__metrics__pb2.AnswerRelevancyRequest.FromString,
                    response_serializer=common__pb2.MetricResponse.SerializeToString,
            ),
            'CalculateFaithfulness': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateFaithfulness,
                    request_deserializer=rag__metrics__pb2.FaithfulnessRequest.FromString,
                    response_serializer=common__pb2.MetricResponse.SerializeToString,
            ),
            'CalculateContextualPrecision': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateContextualPrecision,
                    request_deserializer=rag__metrics__pb2.ContextualPrecisionRequest.FromString,
                    response_serializer=common__pb2.MetricResponse.SerializeToString,
            ),
            'CalculateContextualRecall': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateContextualRecall,
                    request_deserializer=rag__metrics__pb2.ContextualRecallRequest.FromString,
                    response_serializer=common__pb2.MetricResponse.SerializeToString,
            ),
            'CalculateContextualRelevancy': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateContextualRelevancy,
                    request_deserializer=rag__metrics__pb2.ContextualRelevancyRequest.FromString,
                    response_serializer=common__pb2.MetricResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'evaluation.rag.RAGMetricsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RAGMetricsService(object):
    """RAG Metrics Service - Internal service called by main DeepEval service
    """

    @staticmethod
    def CalculateAnswerRelevancy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluation.rag.RAGMetricsService/CalculateAnswerRelevancy',
            rag__metrics__pb2.AnswerRelevancyRequest.SerializeToString,
            common__pb2.MetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateFaithfulness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluation.rag.RAGMetricsService/CalculateFaithfulness',
            rag__metrics__pb2.FaithfulnessRequest.SerializeToString,
            common__pb2.MetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateContextualPrecision(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluation.rag.RAGMetricsService/CalculateContextualPrecision',
            rag__metrics__pb2.ContextualPrecisionRequest.SerializeToString,
            common__pb2.MetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateContextualRecall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluation.rag.RAGMetricsService/CalculateContextualRecall',
            rag__metrics__pb2.ContextualRecallRequest.SerializeToString,
            common__pb2.MetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateContextualRelevancy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluation.rag.RAGMetricsService/CalculateContextualRelevancy',
            rag__metrics__pb2.ContextualRelevancyRequest.SerializeToString,
            common__pb2.MetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
